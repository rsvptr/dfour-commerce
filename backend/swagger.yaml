openapi: 3.0.0

info:
  version: 1.0.0

  title: D4com API

  description: A simple API to do CRUD on user, orders, product, upload resource

servers:
  - url: http://localhost:5000/

tags:
  - name: Users
    description: API to manage the users.
  - name: Login
    description: API to manage the login.
  - name: Orders
    description: API to manage the orders.
  - name: Products
    description: API to manage the products.

paths:
  /api/users:
    get:
      security:
        - bearerAuth: []
      summary: Lists all the users
      tags: [Users]
      responses:
        "200":
          description: The list of users.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"

    post:
      security:
        - bearerAuth: []
      summary: Creates an User object.

      tags: [Users]

      requestBody:
        required: true

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"

      responses:
        "201":
          description: Created

  /api/users/{userID}:
    get:
      security:
        - bearerAuth: []
      summary: Returns an User by ID.

      tags: [Users]

      parameters:
        - name: userID

          in: path

          required: true

          description: Autogenerated User ID by MongoDB

          schema:
            type: string

      responses:
        "200":
          description: OK

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
    put:
      security:
        - bearerAuth: []
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Users"
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: ID of the user that need to be updated
          required: true
          type: string
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      security:
        - bearerAuth: []
      tags: [Users]
      summary: "Delete user"
      produces:
        - "application/json"
      parameters:
        - name: userID
          in: path
          description: The User that needs to be deleted
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"

  /api/users/login:
    post:
      summary: Creates an Login object.

      tags: [Login]

      requestBody:
        required: true

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"

      responses:
        "201":
          description: Created

  /api/orders:
    get:
      security:
        - bearerAuth: []
      summary: Lists all the orders
      tags: [Orders]
      responses:
        "200":
          description: The list of orders.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
    post:
      security:
        - bearerAuth: []
      summary: Creates an order object.

      tags: [Orders]

      requestBody:
        required: true

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Orders"
      responses:
        "201":
          description: Created
  

  /api/orders/myorders:
    get:
      security:
        - bearerAuth: []
      summary: Lists all my orders
      tags: [Orders]
      responses:
        "200":
          description: The list my orders.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"

  
  /api/orders/{orderID}:
    get:
      security:
        - bearerAuth: []
      summary: Returns an order by ID.

      tags: [Orders]

      parameters:
        - name: orderID

          in: path

          required: true

          description: Autogenerated User ID by MongoDB

          schema:
            type: string

      responses:
        "200":
          description: OK

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
    put:
      security:
        - bearerAuth: []
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Orders"
      produces:
        - "application/json"
      parameters:
        - name: orderID
          in: path
          description: ID of the user that need to be updated
          required: true
          type: string
      responses:
        "400":
          description: "Invalid order supplied"
        "404":
          description: "order not found"
    delete:
      security:
        - bearerAuth: []
      tags: [Orders]
      summary: "Delete order"
      produces:
        - "application/json"
      parameters:
        - name: orderID
          in: path
          description: The order that needs to be deleted
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid order supplied"
        "404":
          description: "order not found"

      


    
  /api/products:
    get:
      security:
        - bearerAuth: []
      summary: Lists all the products
      tags: [Products]
      responses:
        "200":
          description: The list of products.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
    post:
      security:
        - bearerAuth: []
      summary: Creates a product object.

      tags: [Products]

      requestBody:
        required: true

        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Products"
      responses:
        "201":
          description: Created
  /api/products/top:
    get:
      security:
        - bearerAuth: []
      summary: Lists all the products
      tags: [Products]
      responses:
        "200":
          description: The list of products.

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
  /api/products/{productID}:
    get:
      security:
        - bearerAuth: []
      summary: Returns a product by ID.

      tags: [Products]

      parameters:
        - name: productID

          in: path

          required: true

          description: Autogenerated User ID by MongoDB

          schema:
            type: string

      responses:
        "200":
          description: OK

          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
    put:
      security:
        - bearerAuth: []
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Products"
      produces:
        - "application/json"
      parameters:
        - name: productID
          in: path
          description: ID of the product that need to be updated
          required: true
          type: string
      responses:
        "400":
          description: "Invalid product supplied"
        "404":
          description: "product not found"
    delete:
      security:
        - bearerAuth: []
      tags: [Products]
      summary: "Delete user"
      produces:
        - "application/json"
      parameters:
        - name: productID
          in: path
          description: The product that needs to be deleted
          required: true
          type: "string"
      responses:
        "400":
          description: "Invalid product supplied"
        "404":
          description: "product not found"

    

  
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Users:
      type: object

      required:
        - name

        - email

        - password

        - IsAdmin

      properties:
        id:
          type: integer

          description: The auto-generated id of the user.

        name:
          type: string

          description: The name of the user.

        email:
          type: string

          description: The email of the user.

        password:
          type: string

          description: The password of the user.

        IsAdmin:
          type: boolean

          description: To check whether admin or user.

      example:
        name: logu

        email: l@gmail.com

        password: 6969aw

        IsAdmin: true

    Login:
      type: object

      required:
        - email

        - password

      properties:
        email:
          type: string

          description: The email of the user.

        password:
          type: string

          description: The password of the user.

      example:
        email: admin@example.com

        password: 123456
    
    Orders:
      type: object
      required:
    
        - user
        - orderItems
        - shippingAddress
        - paymentMethod
        - paymentResult
        - taxPrice
        - shippingPrice
        - totalPrice
        - isPaid
        - isDelivered

      properties:
        user:
          type: string

          description: The details of the user.
        orderItems:
          type: string

          description: The email of the user.
        shippingAddress:
          type: string

          description: The email of the user.
        paymentMethod:
          type: string

          description: The email of the user.
        paymentResult:
          type: string

          description: The email of the user.
        taxPrice:
          type: number

          description: The email of the user.
        shippingPrice:
          type: number

          description: The email of the user.
        totalPrice:
          type: number

          description: The email of the user.
        isPaid:
          type: boolean

          description: The email of the user.
        isDelivered:
          type: boolean

          description: The email of the user.
      example:
        user: 61dc29ac27ee3d3f1406bdbe
        orderItems: Ballesh
        shippingAddress: kwjsfd KD o
        paymentMethod: PayPal
        paymentResult: 98199391SB772880F
        taxPrice: 69
        shippingPrice:  1000
        totalPrice: 7000
        isPaid: true
        isDelivered: true

    Products : 
      type : object 
      required : 
        - user
        - name 
        - image
        - brand
        - category 
        - description
        - reviews 
        - rating
        - numReviews
        - price
        - countInStock
      properties :
        user:
          type: string

          description: The email of the user.
        name:
          type: string

          description: The email of the user.
        image:
          type: string

          description: The email of the user.
        brand:
          type: string

          description: The email of the user.
        category:
          type: string

          description: The email of the user.
        description:
          type: string

          description: The email of the user.
        reviews:
          type: string

          description: The email of the user.
        rating:
          type: string

          description: The email of the user.
        numReviews:
          type: number

          description: The email of the user.
        price:
          type: number

          description: The email of the user.
        countInStock:
          type: number

          description: The email of the user.
      example : 
        rating: 3.5
        numReviews: 2
        price: 405
        countInStock: 30
        id: "61dc27d36ded5d3ce4522d5e"
        name: "OnePlus Nord 2 5G"
        image: "/images/op_nord2.jpg"
        description: "Blue Haze color, MediaTek Dimensity 1200, 8GB RAM, 128GB Storage, 4500mAh battery, Android 11, 50MP Triple Camera"
        brand: "OnePlus"
        category: "Mobiles"
        user: "61dc27d36ded5d3ce4522d4f"
